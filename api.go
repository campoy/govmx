package vmx

type Vhardware struct {
	Version int    `vmx:"version"`
	Compat  string `vmx:"productCompatibility"`
}

type Ethernet struct {
	StartConnected       bool   `vmx:"startConnected"`
	Present              bool   `vmx:"present"`
	ConnectionType       string `vmx:"connectionType"`
	VirtualDev           string `vmx:"virtualDev"`
	WakeOnPcktRcv        bool   `vmx:"wakeOnPcktRcv"`
	AddressType          string `vmx:"addressType"`
	LinkStatePropagation bool   `vmx:"linkStatePropagation.enable,omitempty"`
	VNetwork             string `vmx:"vnet"`
}

type SATADevice struct {
	Present        bool   `vmx:"present,omitempty"`
	StartConnected bool   `vmx:"startconnected,omitempty"`
	Type           string `vmx:"devicetype,omitempty"`
	Filename       string `vmxl:"filename,omitempty"`
}

type SCSIDevice struct {
	Present        bool   `vmx:"present"`
	StartConnected bool   `vmx:"startconnected,omitempty"`
	PCISlot        int    `vmx:"pcislotnumber,omitempty"`
	VirtualDev     string `vmx:"virtualdev,omitempty"`
	Type           string `vmx:"devicetype"`
	Filename       string `vmxl:"filename,omitempty"`
}

type IDEDevice struct {
	Present        bool   `vmx:"present,omitempty"`
	StartConnected bool   `vmx:"startconnected,omitempty"`
	Type           string `vmx:"devicetype,omitempty"`
	Filename       string `vmxl:"filename,omitempty"`
}

type USBDevice struct {
	Present bool   `vmx:"present,omitempty"`
	Speed   uint   `vmx:"speed,omitempty"`
	Type    string `vmx:"devicetype,omitempty"`
	Port    uint   `vmx:"port,omitempty"`
	Parent  string `vmx:"parent,omitmepty"`
}

type PowerType struct {
	PowerOff string `vmx:"poweroff,omitempty"`
	PowerOn  string `vmx:"poweron,omitempty"`
	Reset    string `vmx:"reset,omitempty"`
	Suspend  string `vmx:"suspend,omitempty"`
}

type Sound struct {
	Present    bool   `vmx:"present"`
	Filename   string `vmx:"filename"`
	Autodetect bool   `vmx:"autodetect"`
}

type SerialPort struct {
	StartConnected     bool   `vmx:"startconnected"`
	Present            bool   `vmx:"present"`
	Filetype           string `vmx:"filetype"`
	Filename           string `vmx:"filename"`
	Autodetect         bool   `vmx:"autodetect"`
	TryNoRxLoss        bool   `vmx:"trynorxloss"`
	PipeEndpoint       string `vmx:"pipe.endpoint"`
	AllowGuestConnCtrl bool   `vmx:"allowGuestConnectionControl"`
	HardwareFlowCtrl   bool   `vmx:"hardwareFlowControl"`
}

type PCIBridge struct {
	Present    bool   `vmx:"present"`
	VirtualDev string `vmx:"virtualdev"`
	SlotNumber int    `vmx:"pcislotnumber"`
	Functions  uint   `vmx:"functions"`
}

type Tools struct {
	SyncTime      bool   `vmx:"synctime"`
	UpgradePolicy string `vmx:"upgrade.policy"`
	RemindInstall bool   `vmx:"remindinstall"`
}

type UUID struct {
	Action string `vmx:"action"`
	// Autogenerated, do not change
	Bios string `vmx:"bios"`
	// Autogenerated, do not change
	Location string `vmx:"location"`
}

type RemoteDisplay struct {
	VNCEnabled     bool   `vmx:"vnc.enabled"`
	VNCPort        uint   `vmx:"vnc.port"`
	VNCPassword    string `vmx:"vnc.password"`
	VNCIPAddress   string `vmx:"vnc.ip"`
	VNCKey         string `vmx:"vnc.key"`
	VNCKeyMap      string `vmx:"vnc.keymap"`
	VNCKeyMapFile  string `vmx:"vnc.keymapfile"`
	VNCZlibLevel   uint   `vmx:"vnc.zliblevel"`
	VNCWheelStep   string `vmx:"vncWheelStep"`
	Depth          uint   `vmx:"depth"`
	MaxConnections uint   `vmx:"maxconnections"`
	MaxHeight      uint   `vmx:"maxheight"`
	MaxWidth       uint   `vmx:"maxwidth"`
}

type SharedFolder struct {
	Present     bool   `vmx:"present"`
	Enabled     bool   `vmx:"enabled"`
	ReadAccess  bool   `vmx:"readaccess"`
	WriteAccess bool   `vmx:"writeaccess"`
	HostPath    string `vmx:"hostpath"`
	GuestName   string `vmx:"guestname"`
	Expiration  string `vmx:"expiration"`
}

type GUI struct {
	ExitAtPowerOff      bool `vmx:"exitatpoweroff"`
	FullScreenAtPowerOn bool `vmx:"fullscreenatpoweron"`
	PowerOnAtStartup    bool `vmx:"poweronatstartup"`
	ExitOnCLIHalt       bool `vmx:"exitonclihlt"`
}

type Isolation struct {
	// Disable shared folders
	HgfsDisable      bool `vmx:"tools.hgfs.disable"`
	CopyDisable      bool `vmx:"tools.copy.disable"`
	PasteDisable     bool `vmx:"tools.paste.disable"`
	DragNDropDisable bool `vmx:"tools.dnd.disable"`
}

type FloppyDevice struct {
	Present        bool   `vmx:"present"`
	StartConnected bool   `vmx:"startconnected"`
	Autodetect     bool   `vmx:"autodetect"`
	Filename       string `vmx:"filename"`
	Filetype       string `vmx:"filetype"`
	GuestControl   bool   `vmx:"allowGuestConnectionControl"`
}

type VirtualMachine struct {
	Encoding        string    `vmx:".encoding"`
	ExtendedCfgFile string    `vmx:"extendedConfigFile"`
	PowerType       PowerType `vmx:"powertype"`
	Annotation      string    `vmx:"annotation"`
	Vhardware       Vhardware `vmx:"virtualhw"`
	Memsize         uint      `vmx:"memsize"`
	NumvCPUs        uint      `vmx:"numvcpus"`
	MemHotAdd       bool      `vmx:"mem.hotadd"`
	VCPUHotAdd      bool      `vmx:"vcpu.hotadd"`
	DisplayName     string    `vmx:"displayname"`
	GuestOS         string    `vmx:"guestos"`
	Autoanswer      bool      `vmx:"msg.autoanswer"`
	Sound           Sound     `vmx:"sound"`
	Tools           Tools     `vmx:"tools"`
	NVRam           string    `vmx:"nvmram"`
	UUID            UUID      `vmx:"uuid"`
	CleanShutdown   bool      `vmx:"cleanshutdown"`
	SoftPowerOff    bool      `vmx:"softpoweroff"`
	// Enable or not nested virtualiation
	VHVEnable     bool           `vmx:"vhv.enable"`
	RemoteDisplay RemoteDisplay  `vmx:"remotedisplay"`
	Isolation     Isolation      `vmx:"isolation"`
	SharedFolders []SharedFolder `vmx:"sharedfolder"`
	PCIBridges    []PCIBridge    `vmx:"pcibridge"`
	SerialPorts   []SerialPort   `vmx:"serial"`
	Ethernet      []Ethernet     `vmx:"ethernet"`
	IDEDevices    []IDEDevice    `vmx:"ide"`
	SCSIDevices   []SCSIDevice   `vmx:"scsi"`
	SATADevices   []SATADevice   `vmx:"sata"`
	USBDevices    []USBDevice    `vmx:"usb"`
	FloppyDevices []FloppyDevice `vmx:"floppy"`
}
